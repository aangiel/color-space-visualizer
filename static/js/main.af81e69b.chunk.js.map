{"version":3,"sources":["style.js","ColorUtils.js","CubeUtils.js","RGBCubes.js","HSVCubes.js","components/ThreeColorSpace.js","App.js","theme.js","index.js"],"names":["SPACING","logoSize","makeHeaderStyle","theme","space","top","spacing","left","makeLogoStyle","height","makeButtonsStyle","bottom","useStyles","makeStyles","header","position","flexGrow","display","breakpoints","down","up","logo","buttons","colorPreview","width","right","rgb2hex","r","g","b","hsv2rgb","h","s","v","min","_to8bitsInteger","val","Math","floor","createCubeMesh","size","color","x","y","z","geometry","THREE","material","mesh","castShadow","receiveShadow","transparent","set","name","offset","_sortByColor","a","userData","RGB","getCubeColor","i","j","k","getCubePosition","totalSize","degree","saturation","value","radian","PI","radius","cos","sin","_getEventCoords","e","elm","currentTarget","type","startsWith","targetTouches","pageX","offsetLeft","pageY","offsetTop","clientX","clientY","offsetWidth","offsetHeight","ThreeColorSpace","props","divRef","React","createRef","rendererRender","selectedCube","currentSpin","cubes","attrs","fov","near","far","cameraPosition","cameraLookAt","lights","ambient","point","config","window","innerWidth","innerHeight","renderer","this","makeRenderer","shadowMap","enabled","camera","makeCamera","scene","makeScene","controls","makeOrbitControls","domElement","render","clickStart","makeEventStart","clickEnd","makeEventEnd","addEventListener","createCubes","current","appendChild","tick","update","rotation","abs","unhighlightCubes","requestAnimationFrame","antialias","setSize","setClearColor","setPixelRatio","devicePixelRatio","aspect","add","light","plane","side","opacity","ret","cube","push","sort","createRGBCubes","hsvProps","numCubes","max","length","HSV","addHSVProps","OrbitControls","target","enableDamping","dampingFactor","evtCoords","coords","selected","event","raycaster","preventDefault","setFromCamera","children","intersects","intersectObjects","object","getIntersectObject","rgb","getHexString","highlightCubes","onSelectColor","nextProps","nextState","model","updateCubes","prop","setHex","ref","Component","App","classes","useState","setModel","selecedColor","setColor","getVariant","modelName","className","src","alt","ButtonGroup","orientation","aria-label","Button","variant","onClick","Box","style","backgroundColor","createMuiTheme","palette","primary","indigo","secondary","pink","background","default","ReactDOM","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.af81e69b.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\n\nconst SPACING = {\n  'sm': 1,\n  'md': 2,\n  'lg': 2,\n};\nconst logoSize = {\n  'sm': 48,\n  'md': 56,\n  'lg': 64,\n};\n\nconst makeHeaderStyle = (theme, space) => {\n  return {\n    top: theme.spacing(space),\n    left: theme.spacing(space),\n    //right: theme.spacing(space),\n  };\n};\nconst makeLogoStyle = (height) => {\n  return {\n    height: height,\n  };\n};\nconst makeButtonsStyle = (theme, space) => {\n  return {\n    bottom: theme.spacing(space),\n    left: theme.spacing(space),\n  };\n};\n\nconst useStyles = makeStyles(theme => ({\n  header: {\n    position: 'absolute',\n    flexGrow: 1,\n    display: 'flex',\n    [theme.breakpoints.down('sm')]: makeHeaderStyle(theme, SPACING.sm),\n    [theme.breakpoints.up('sm')]  : makeHeaderStyle(theme, SPACING.md),\n    [theme.breakpoints.up('lg')]  : makeHeaderStyle(theme, SPACING.lg),\n  },\n  logo: {\n    [theme.breakpoints.down('sm')]: makeLogoStyle(logoSize.sm),\n    [theme.breakpoints.up('sm')]  : makeLogoStyle(logoSize.md),\n    [theme.breakpoints.up('lg')]  : makeLogoStyle(logoSize.lg),\n  },\n  buttons: {\n    position: 'absolute',\n    [theme.breakpoints.down('sm')]: makeButtonsStyle(theme, SPACING.sm),\n    [theme.breakpoints.up('sm')]  : makeButtonsStyle(theme, SPACING.md),\n    [theme.breakpoints.up('lg')]  : makeButtonsStyle(theme, SPACING.lg),\n  },\n  colorPreview: {\n    position: 'absolute',\n    width: '100px',\n    height: '100px',\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n  },\n}));\n\nexport default useStyles;\n","/**\n * @desc\n * ColorUtils module\n * @module ColorUtils\n */\n\n\nconst rgb2str = (r, g, b) => {\n  return \"#\" + \n      _toHexStr(r) + \n      _toHexStr(g) + \n      _toHexStr(b);\n};\n\nconst rgb2hex = (r, g, b) => {\n  return r * (256 ** 2) + g * (256) + b;\n};\n\nconst hsl2str = (h, s, l) => {\n  return \"hsl(\" + \n      Math.round(360.0 * h) + \", \" + \n      Math.round(100.0 * s) + \"%, \" + \n      Math.round(100.0 * l) + \"%)\";\n};\n\n/**\n * @param {Number} h degree of Hue in HSV color model (0 - 359)\n * @param {Number} s percentage of Saturation in HSV color model (0 - 100)\n * @param {Number} v percentage of Value in HSV color model (0 - 100)\n * @return {String} RGB HEX Value\n */\nconst hsv2rgb = (h, s, v) => {\n  let r, g, b;\n  const max = v;\n  const min = v - s;\n  if (h < 0 || h >= 360) {\n    r = 0;\n    g = 0;\n    b = 0;\n  } else if (h < 60) {\n    r = max;\n    g = min + (max - min) * h / 60;\n    b = min;\n  } else if (h < 120) {\n    r = min + (max - min) * (120 - h) / 60;\n    g = max;\n    b = min;\n  } else if (h < 180) {\n    r = min;\n    g = max;\n    b = min + (max - min) * (h - 120) / 60;\n  } else if (h < 240) {\n    r = min;\n    g = min + (max - min) * (240 - h) / 60;\n    b = max;\n  } else if (h < 300) {\n    r = min + (max - min) * (h - 240) / 60;\n    g = min;\n    b = max;\n  } else if (h < 360) {\n    r = max;\n    g = min;\n    b = min + (max - min) * (360 - h) / 60;\n  }\n  r = _to8bitsInteger(r);\n  g = _to8bitsInteger(g);\n  b = _to8bitsInteger(b);\n  return rgb2hex(r, g, b);\n}\n\n\n/******************************************\n * private functions\n ******************************************/\nconst _toHexStr = n => {\n  if (n < 16) {\n    return \"0\" + n.toString(16);\n  }\n  return n.toString(16);\n};\n\n/**\n * convert percentage value to 8bit digit (0-1.0 -> 0-255) \n * @param {Number} val\n * @param {Number} n \n * @return rounded value\n */\nconst _to8bitsInteger = val => {\n  return Math.floor(255 * val / 100.0);\n};\n\n\nexport { rgb2str, rgb2hex, hsl2str, hsv2rgb };\n","import * as THREE from \"three\";\n\nexport const OBJ_NAME = 'COLOR_CUBE';\n\nexport const createCubeMesh = (size, color, x, y, z) => {\n  const geometry = new THREE.CubeGeometry(size, size, size);\n  const material = new THREE.MeshPhongMaterial({color: color});\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = true;\n  mesh.receiveShadow = true;\n  mesh.material.transparent = true;\n  mesh.position.set(x, y, z);\n  mesh.name = OBJ_NAME;\n  return mesh;\n};\n","import {rgb2hex} from './ColorUtils'\nimport {createCubeMesh} from './CubeUtils'\n\nconst n = 8;\nconst cubeSize = 3;\n\n//const spacing = 6;\nconst spacing = 8;\nconst offset = [0, 80, 0];\n\nconst totalSize = cubeSize * n + spacing * (n - 1);\nconst colorSpacing = 256 / n;\n\n\nconst createRGBCubes = () => {\n  const ret = []\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      for (let k = 0; k < n; k++) {\n        const color = getCubeColor(i, j, k);\n        const [x, y, z] = getCubePosition(i, j, k);\n        const cube = createCubeMesh(cubeSize, color, x, y, z);\n        cube.userData.RGB = {\n          color: color,\n          position: [x, y, z],\n        };\n        ret.push(cube);\n      }\n    }\n  }\n  ret.sort(_sortByColor);\n  return ret;\n};\n\nconst _sortByColor = (a, b) => {\n  if (a.userData.RGB.color > b.userData.RGB.color) {\n      return 1;\n  }\n  if (a.userData.RGB.color < b.userData.RGB.color ) {\n      return -1;\n  }\n  return 0;\n};\n\n\n\nconst getCubeColor = (i, j, k) => {\n  return rgb2hex(\n    i * colorSpacing,\n    j * colorSpacing,\n    k * colorSpacing\n  );\n};\n\nconst getCubePosition = (i, j, k) => {\n  return [\n    cubeSize * (i + 1) + spacing * i - (totalSize / 2) + offset[0],\n    cubeSize * (j + 1) + spacing * j - (totalSize / 2) + offset[1],\n    cubeSize * (k + 1) + spacing * k - (totalSize / 2) + offset[2]\n  ];\n};\n\nexport {createRGBCubes};\n","import {hsv2rgb} from './ColorUtils'\nimport {createCubeMesh} from './CubeUtils'\n\nconst n = 6;   // number unit of point in circle\nconst maxRadius = 60;\n\n//const steps = 8;\nconst steps = 7;\nconst height = 140;\n//const height = 90;\n\nconst offset = -10;\n\nconst cubeSize = 3;\n\n\nconst createHSVCubes = () => {\n  const ret = []\n  for (let i = 0; i <= steps; i++) {\n    const value = i / steps * 100.0;\n    for (let j = 0; j <= i; j++) {\n    // for cylider formation\n    //for (let j = 0; j <= steps; j++) {\n      const saturation = j / steps * 100.0;\n      const numCubes = Math.max(j * n, 1);\n      //const numCubes = Math.max(n, 1);\n      //const numCubes = 15\n      for (let k = 0; k < numCubes; k++) {\n        const degree = 360.0 / numCubes * k;\n        const color = hsv2rgb(degree, saturation, value);\n        //const pos = getCubePosition(degree, saturation, value);\n        const [x, y, z] = getCubePosition(degree, saturation, value);\n        const cube = createCubeMesh(cubeSize, color, x, y, z);\n        ret.push(cube);\n      }\n    }\n  }\n  return ret;\n};\n\nconst addHSVProps = (cubes) => {\n  const hsvProps = []\n  for (let i = 0; i <= steps; i++) {\n    const value = i / steps * 100.0;\n    for (let j = 0; j <= i; j++) {\n      const saturation = j / steps * 100.0;\n      const numCubes = Math.max(j * n, 1);\n      for (let k = 0; k < numCubes; k++) {\n        const degree = 360.0 / numCubes * k;\n        const color = hsv2rgb(degree, saturation, value);\n        const [x, y, z] = getCubePosition(degree, saturation, value);\n        hsvProps.push({\n          color: color,\n          position: [x, y, z],\n        });\n      }\n    }\n  }\n  hsvProps.sort(_sortByColor);\n  for (let i = 0; i < cubes.length; i++) {\n    const cube = cubes[i];\n    cube.userData.HSV = hsvProps[i];\n  }\n  return;\n};\n\nconst _sortByColor = (a, b) => {\n  if (a.color > b.color) {\n      return 1;\n  }\n  if (a.color < b.color ) {\n      return -1;\n  }\n  return 0;\n};\n\n\nconst getCubePosition = (degree, saturation, value) =>{\n  const radian = degree * Math.PI / 180.0;\n  const radius = maxRadius * saturation / 100.0;\n  return [\n    Math.cos(radian) * radius,\n    height * (value / 100.0) - offset,\n    Math.sin(radian) * radius\n  ];\n};\n\nexport {createHSVCubes, addHSVProps};\n","import React from \"react\";\n\nimport * as THREE from \"three\";\nimport OrbitControls from \"three-orbitcontrols\";\n\nimport { createRGBCubes } from '../RGBCubes';\nimport { createHSVCubes, addHSVProps } from '../HSVCubes';\nimport { OBJ_NAME} from '../CubeUtils'\n\n\nconst _getEventCoords = (e) => {\n  /*\n   * get coordinates in target element in which event occured\n   */\n  let x, y;\n  const elm = e.currentTarget;\n  if (e.type.startsWith('touch')) {\n    // touchstart, touchmove or touchend\n    x = e.targetTouches[0].pageX - elm.offsetLeft;\n    y = e.targetTouches[0].pageY - elm.offsetTop;\n  } else {\n    // mousedown, mouseup, mousemove or click\n    x = e.clientX - elm.offsetLeft;\n    y = e.clientY - elm.offsetTop;\n  }\n  const w = elm.offsetWidth;\n  const h = elm.offsetHeight;\n  const coords = {\n    x :  (x / w) * 2 - 1,\n    y : -(y / h) * 2 + 1,\n  };\n  return coords;\n};\n\n\n\nconst getIntersectObject = (event, scene, camera) => {\n  const raycaster = new THREE.Raycaster();\n  event.preventDefault();\n  const coords = _getEventCoords(event);\n  raycaster.setFromCamera(coords, camera);\n  const cubes = scene.children\n  const intersects = raycaster.intersectObjects(cubes);\n  if (intersects.length > 0) {\n    const mesh = intersects[0].object;\n    if (mesh.name === OBJ_NAME) {\n      return mesh;\n    }\n  }\n  return null;\n};\n\n\nclass ThreeColorSpace extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.divRef = React.createRef();\n    this.rendererRender = () => {};\n    this.selectedCube = null;\n    this.currentSpin = 0.0;\n    this.cubes = null;\n\n    this.attrs = {\n      width :  800,\n      height:  800,\n      color : 0x303030,\n\n      fov  : 60,   // field of view\n      near : 1,    // near clip\n      far  : 10000,// far clip\n\n      // for RGB\n      cameraPosition: [240, 240, 200],\n      cameraLookAt:   [0, 50, 0],\n\n      lights: {\n        ambient: [0xffffff, 1.0],  // color, strength\n        point: {\n          //config: [0xffffff, 1, 100], // color, strength, distance, decay\n          //position: [0, 100, 0],\n          castShadow: true,\n          config: [0xffffff, 1, 500], // color, strength, distance, decay\n          //position: [0, 150, 0]\n          position: [0, 300, 0]\n        },\n      },\n    };\n  }\n\n  componentDidMount() {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    const renderer = this.makeRenderer(width, height);\n    renderer.shadowMap.enabled = true;\n\n    const camera = this.makeCamera(width, height);\n    this.scene = this.makeScene();\n    const controls = this.makeOrbitControls(camera, renderer.domElement);\n\n    this.rendererRender = () => {renderer.render(this.scene, camera);};\n\n    // attach click event\n    const clickStart = this.makeEventStart();\n    const clickEnd = this.makeEventEnd(this.scene, camera);\n    renderer.domElement.addEventListener('mousedown',  clickStart);\n    renderer.domElement.addEventListener('touchstart', clickStart);\n    renderer.domElement.addEventListener('mouseup',  clickEnd);\n    renderer.domElement.addEventListener('touchend', clickEnd);\n\n    this.createCubes();\n    this.divRef.current.appendChild(renderer.domElement);\n\n    const tick = () => {\n      controls.update();\n      if (this.selectedCube && this.currentSpin) {\n        this.selectedCube.rotation.x += this.currentSpin;\n        this.selectedCube.rotation.y += this.currentSpin;\n        if (this.currentSpin > 0.1) {\n          this.currentSpin *= 0.93;\n        } else if (Math.abs(\n              this.selectedCube.rotation.y % (Math.PI / 2.0)) < 0.09) {\n          this.currentSpin = 0.0;\n          this.selectedCube.rotation.set(0, 0, 0);\n          this.unhighlightCubes();\n        }\n      }\n      this.rendererRender();\n      requestAnimationFrame(tick);\n    };\n    tick();\n  }\n\n  makeRenderer (width, height) {\n    const renderer = new THREE.WebGLRenderer({antialias: true});\n    renderer.setSize(width, height);\n    renderer.setClearColor(this.attrs.color, 1.0);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    return renderer;\n  }\n\n  makeCamera (width, height) {\n    const aspect = width / height;\n    const camera = new THREE.PerspectiveCamera(\n        this.attrs.fov, aspect, this.attrs.near, this.far);\n    camera.position.set(...this.attrs.cameraPosition); // x, y, z\n    return camera;\n  }\n\n  makeScene () {\n    const scene = new THREE.Scene();\n\n    /* light settings */\n    if (this.attrs.lights.ambient) {\n      const ambient = new THREE.AmbientLight(...this.attrs.lights.ambient);\n      scene.add(ambient);\n    }\n    if (this.attrs.lights.point) {\n      const light = new THREE.PointLight(...this.attrs.lights.point.config);\n      light.position.set(...this.attrs.lights.point.position);\n      light.castShadow = this.attrs.lights.point.castShadow;\n      scene.add(light);\n    }\n\n    /* scene settings */\n    //scene.add(new THREE.AxesHelper(1000));\n    if (false) {\n      scene.add(new THREE.GridHelper(1200, 60, 0x888888));\n    } else {\n\n      const plane = new THREE.Mesh(\n        new THREE.PlaneGeometry(1200,1200,2),\n\n        new THREE.MeshStandardMaterial({\n          //color: 0x888888,\n          color : 0x404040,\n          //color : 0x303030,\n          side: THREE.DoubleSide,\n          transparent: true,\n          opacity: 0.85,\n        })\n      );\n      plane.position.set(0, -1, 0);\n      plane.rotation.set(Math.PI / 2.0, 0, 0);\n      plane.castShadow = false;\n      plane.receiveShadow = true;\n\n      scene.add(plane);\n\n      const gridLineColor = 0x606060;\n      scene.add(new THREE.GridHelper(1200, 60, gridLineColor, gridLineColor));\n    }\n\n    return scene;\n  }\n\n  createCubes () {\n    this.cubes = createRGBCubes();\n    addHSVProps(this.cubes);\n    for (let cube of this.cubes) {\n      this.scene.add(cube);\n    }\n  };\n\n  highlightCubes () {\n    for (let cube of this.cubes) {\n      cube.material.opacity = 0.2;\n    }\n    this.selectedCube.material.opacity = 1.0;\n  }\n\n  unhighlightCubes () {\n    for (let cube of this.cubes) {\n      cube.material.opacity = 1.0;\n    }\n  }\n\n  makeOrbitControls (camera, elm) {\n    const controls = new OrbitControls(camera, elm)\n    controls.target = new THREE.Vector3(...this.attrs.cameraLookAt);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.1;\n    return controls\n  }\n\n  makeEventStart () {\n    const onStart = (e) => {\n      this.evtCoords = _getEventCoords(e);\n    };\n    return onStart;\n  }\n\n  makeEventEnd (scene, camera) {\n    const onClicked = (e) => {\n      const coords = _getEventCoords(e);\n      if (coords.x !== this.evtCoords.x || coords.y !== this.evtCoords.y) {\n        return;\n      }\n      const selected = getIntersectObject(e, scene, camera);\n      if (selected) {\n        this.selectedCube = selected;\n        this.currentSpin = 1.0;\n        const color = this.selectedCube.material.color;\n        const rgb = color.getHexString();\n        //const hsl = color.getHSL();\n        this.highlightCubes();\n        this.props.onSelectColor(`#${rgb}`);\n      }\n    };\n    return onClicked;\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.model !== nextProps.model) {\n      this.updateCubes(nextProps.model);\n    }\n    return false;\n  }\n\n  updateCubes(model) {\n    for (let cube of this.cubes) {\n      const prop = cube.userData[model];\n      cube.position.set(...prop.position);\n      cube.material.color.setHex(prop.color);\n    }\n  }\n\n  render() {\n    return (\n      <div ref={this.divRef}/>\n    )\n  }\n}\n\nexport default ThreeColorSpace;\n","import React, { useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\n\nimport useStyles from './style.js'\n\nimport ThreeColorSpace from './components/ThreeColorSpace';\n\n\nconst App = (props) => {\n  const classes = useStyles();\n  const [model, setModel] = useState('RGB');\n  const [selecedColor, setColor] = useState('#fff');\n  const getVariant = (modelName) => {\n    return model === modelName ? \"contained\" : \"outlined\";\n  }\n  return (\n    <>\n      <div className={classes.header}>\n        <img  className={classes.logo} src={'logo_20_02.png'} alt={'logo'} />\n      </div>\n      <ThreeColorSpace\n        model={model}\n        onSelectColor={rgb => {setColor(rgb)}}\n      />\n      <ButtonGroup\n        className={classes.buttons}\n        orientation=\"vertical\"\n        color=\"secondary\"\n        aria-label=\"vertical outlined primary button group\"\n      >\n        <Button\n          variant={getVariant('RGB')}\n          onClick={e => {setModel('RGB')}}\n        >\n          RGB\n        </Button>\n        <Button\n          variant={getVariant('HSV')}\n          onClick={e => {setModel('HSV')}}\n        >\n          HSV\n        </Button>\n      </ButtonGroup>\n\n      <Box\n        className={classes.colorPreview}\n        style={{backgroundColor: selecedColor}}\n        aria-label=\"selected color\"\n      />\n    </>\n  );\n};\n\n\nexport default App;\n","import { indigo, pink }   from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n/* A custom theme for this app */\n/* as to color variation, see https://material-ui.com/customization/color/ */\nconst theme = createMuiTheme({\n  palette: {\n    // primary: {\n    //   main: '#80D8FF',\n    // },\n    // secondary: {\n    //   main: '#80CBC4',\n    // },\n    // error: {\n    //   main: red.A400,\n    // },\n    primary: indigo,\n    secondary: pink,\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\nimport App from './App';\nimport theme from './theme';\n\nReactDOM.render(\n  <MuiThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </MuiThemeProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}