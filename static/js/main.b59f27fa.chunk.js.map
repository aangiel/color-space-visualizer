{"version":3,"sources":["style.js","ColorUtils.js","CubeUtils.js","RGBCubes.js","HSVCubes.js","components/ThreeColorSpace.js","App.js","theme.js","index.js"],"names":["SPACING","logoSize","makeHeaderStyle","theme","space","top","spacing","left","makeLogoStyle","height","makeButtonsStyle","bottom","right","useStyles","makeStyles","wrapper","backgroundColor","container","position","padding","borderRight","borderLeft","header","flexGrow","display","breakpoints","down","up","logo","controlButtons","flexDirection","alignItems","colorPreview","marginBottom","width","rgb2hex","r","g","b","selectTextColor","rgbStr","toRgbItem","val","x","Math","pow","luma","parseInt","slice","hsv2rgb","h","s","v","min","_to8bitsInteger","value","floor","createCubeMesh","size","color","y","z","geometry","THREE","material","mesh","castShadow","receiveShadow","transparent","set","name","offset","_sortByColor","a","userData","RGB","getCubeColor","i","j","k","round","getCubePosition","totalSize","degree","saturation","radian","PI","radius","cos","sin","_getEventCoords","e","elm","currentTarget","targetTouches","length","pageX","pageY","changedTouches","clientX","clientY","offsetParent","offsetLeft","offsetTop","offsetWidth","offsetHeight","ThreeColorSpace","props","divRef","React","createRef","rendererRender","selectedCube","currentSpin","cubes","attrs","fov","near","far","cameraPosition","cameraLookAt","lights","ambient","point","config","this","current","parentNode","window","innerHeight","renderer","makeRenderer","shadowMap","enabled","camera","makeCamera","scene","makeScene","controls","makeOrbitControls","domElement","render","clickStart","makeEventStart","clickEnd","makeEventEnd","addEventListener","createCubes","appendChild","tick","update","spinSelectedCube","requestAnimationFrame","rotation","abs","previewing","unhighlightCubes","antialias","setSize","setClearColor","setPixelRatio","devicePixelRatio","aspect","add","light","plane","side","opacity","ret","cube","push","sort","createRGBCubes","hsvProps","numCubes","max","HSV","addHSVProps","OrbitControls","target","enableDamping","dampingFactor","evtCoords","coords","selected","event","raycaster","preventDefault","setFromCamera","children","intersects","intersectObjects","object","getIntersectObject","rgb","getHexString","highlightCubes","onSelectColor","nextProps","nextState","model","updateCubes","prop","setHex","ref","Component","App","classes","useState","setModel","selecedColor","setColor","setPreviewing","getVariant","modelName","className","Container","maxWidth","src","alt","Button","style","onClick","aria-label","ButtonGroup","buttons","orientation","variant","createMuiTheme","palette","primary","indigo","secondary","pink","background","default","ReactDOM","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.b59f27fa.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\n\nconst SPACING = {\n  'sm': 1,\n  'md': 2,\n  'lg': 2,\n};\nconst logoSize = {\n  'sm': 48,\n  'md': 56,\n  'lg': 64,\n};\n\nconst makeHeaderStyle = (theme, space) => {\n  return {\n    top: theme.spacing(space),\n    left: theme.spacing(space),\n    //right: theme.spacing(space),\n  };\n};\nconst makeLogoStyle = (height) => {\n  return {\n    height: height,\n  };\n};\n\nconst makeButtonsStyle = (theme, space) => {\n  return {\n    bottom: theme.spacing(space),\n    right: theme.spacing(space),\n  };\n};\n\nconst useStyles = makeStyles(theme => ({\n  wrapper: {\n    backgroundColor: '#262626',\n    //backgroundColor: '#DDDDDD',\n  },\n  container: {\n    position: 'relative',\n    padding: 0,\n    borderRight: '1px solid #f50057',\n    borderLeft : '1px solid #f50057',\n  },\n  header: {\n    position: 'absolute',\n    flexGrow: 1,\n    display: 'flex',\n    [theme.breakpoints.down('sm')]: makeHeaderStyle(theme, SPACING.sm),\n    [theme.breakpoints.up('sm')]  : makeHeaderStyle(theme, SPACING.md),\n    [theme.breakpoints.up('lg')]  : makeHeaderStyle(theme, SPACING.lg),\n  },\n  logo: {\n    [theme.breakpoints.down('sm')]: makeLogoStyle(logoSize.sm),\n    [theme.breakpoints.up('sm')]  : makeLogoStyle(logoSize.md),\n    [theme.breakpoints.up('lg')]  : makeLogoStyle(logoSize.lg),\n  },\n  controlButtons: {\n    position: 'absolute',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-end',\n    [theme.breakpoints.down('sm')]: makeButtonsStyle(theme, SPACING.sm),\n    [theme.breakpoints.up('sm')]  : makeButtonsStyle(theme, SPACING.md),\n    [theme.breakpoints.up('lg')]  : makeButtonsStyle(theme, SPACING.lg),\n  },\n  colorPreview: {\n    marginBottom: 8,\n    width: 127,\n    height: 40,\n  },\n}));\n\nexport default useStyles;\n","/**\n * @desc\n * ColorUtils module\n * @module ColorUtils\n */\n\n\nconst rgb2str = (r, g, b) => {\n  return \"#\" + \n      _toHexStr(r) + \n      _toHexStr(g) + \n      _toHexStr(b);\n};\n\nconst rgb2hex = (r, g, b) => {\n  return r * (256 ** 2) + g * (256) + b;\n};\n\nconst hsl2str = (h, s, l) => {\n  return \"hsl(\" + \n      Math.round(360.0 * h) + \", \" + \n      Math.round(100.0 * s) + \"%, \" + \n      Math.round(100.0 * l) + \"%)\";\n};\n\nconst selectTextColor = (rgbStr) => {\n  const toRgbItem = val => {\n    const x = val / 255.0;\n    return x <= 0.03928 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n  }\n  const r = toRgbItem(parseInt(rgbStr.slice(1, 3), 16));\n  const g = toRgbItem(parseInt(rgbStr.slice(3, 5), 16));\n  const b = toRgbItem(parseInt(rgbStr.slice(5, 7), 16));\n  const luma = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n\n  const lumaWhite = 1.0;\n  const lumaBlack = 0.0;\n\n  /* calc contrast ratio */\n  const white = (lumaWhite + 0.05) / (luma + 0.05)\n  const black = (luma + 0.05) / (lumaBlack + 0.05)\n  return white < black ? '#000000' : '#ffffff'\n};\n\n\n/**\n * @param {Number} h degree of Hue in HSV color model (0 - 359)\n * @param {Number} s percentage of Saturation in HSV color model (0 - 100)\n * @param {Number} v percentage of Value in HSV color model (0 - 100)\n * @return {String} RGB HEX Value\n */\nconst hsv2rgb = (h, s, v) => {\n  let r, g, b;\n  const max = v;\n  const min = v - s;\n  if (h < 0 || h >= 360) {\n    r = 0;\n    g = 0;\n    b = 0;\n  } else if (h < 60) {\n    r = max;\n    g = min + (max - min) * h / 60;\n    b = min;\n  } else if (h < 120) {\n    r = min + (max - min) * (120 - h) / 60;\n    g = max;\n    b = min;\n  } else if (h < 180) {\n    r = min;\n    g = max;\n    b = min + (max - min) * (h - 120) / 60;\n  } else if (h < 240) {\n    r = min;\n    g = min + (max - min) * (240 - h) / 60;\n    b = max;\n  } else if (h < 300) {\n    r = min + (max - min) * (h - 240) / 60;\n    g = min;\n    b = max;\n  } else if (h < 360) {\n    r = max;\n    g = min;\n    b = min + (max - min) * (360 - h) / 60;\n  }\n  r = _to8bitsInteger(r);\n  g = _to8bitsInteger(g);\n  b = _to8bitsInteger(b);\n  return rgb2hex(r, g, b);\n}\n\n\n/******************************************\n * private functions\n ******************************************/\nconst _toHexStr = n => {\n  if (n < 16) {\n    return \"0\" + n.toString(16);\n  }\n  return n.toString(16);\n};\n\n/**\n * convert percentage value to 8bit digit (0-1.0 -> 0-255) \n * @param {Number} val\n * @param {Number} n \n * @return rounded value\n */\nconst _to8bitsInteger = val => {\n  const value = Math.floor(255 * val / 100.0);\n  const ret = value < 0 ? 255 - value : value;\n  return ret;\n};\n\n\nexport { rgb2str, rgb2hex, hsl2str, hsv2rgb, selectTextColor };\n","import * as THREE from \"three\";\n\nexport const OBJ_NAME = 'COLOR_CUBE';\n\nexport const createCubeMesh = (size, color, x, y, z) => {\n  const geometry = new THREE.CubeGeometry(size, size, size);\n  const material = new THREE.MeshPhongMaterial({color: color});\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = true;\n  mesh.receiveShadow = true;\n  mesh.material.transparent = true;\n  mesh.position.set(x, y, z);\n  mesh.name = OBJ_NAME;\n  return mesh;\n};\n","import {rgb2hex} from './ColorUtils';\nimport {createCubeMesh} from './CubeUtils';\n\nconst n = 8;\nconst cubeSize = 3;\n\n//const spacing = 6;\nconst spacing = 8;\nconst offset = [0, 80, 0];\n\nconst totalSize = cubeSize * n + spacing * (n - 1);\nconst colorSpacing = 255.0 / (n - 1);\n\n\nconst createRGBCubes = () => {\n  const ret = []\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      for (let k = 0; k < n; k++) {\n        const color = getCubeColor(i, j, k);\n        const [x, y, z] = getCubePosition(i, j, k);\n        const cube = createCubeMesh(cubeSize, color, x, y, z);\n        cube.userData.RGB = {\n          color: color,\n          position: [x, y, z],\n        };\n        ret.push(cube);\n      }\n    }\n  }\n  ret.sort(_sortByColor);\n  return ret;\n};\n\nconst _sortByColor = (a, b) => {\n  if (a.userData.RGB.color > b.userData.RGB.color) {\n      return 1;\n  }\n  if (a.userData.RGB.color < b.userData.RGB.color ) {\n      return -1;\n  }\n  return 0;\n};\n\n\n\nconst getCubeColor = (i, j, k) => {\n  return rgb2hex(\n    Math.round(i * colorSpacing),\n    Math.round(j * colorSpacing),\n    Math.round(k * colorSpacing)\n  );\n};\n\nconst getCubePosition = (i, j, k) => {\n  return [\n    cubeSize * (i + 1) + spacing * i - (totalSize / 2) + offset[0],\n    cubeSize * (j + 1) + spacing * j - (totalSize / 2) + offset[1],\n    cubeSize * (k + 1) + spacing * k - (totalSize / 2) + offset[2]\n  ];\n};\n\nexport {createRGBCubes};\n","import {hsv2rgb} from './ColorUtils';\nimport {createCubeMesh} from './CubeUtils';\n\nconst n = 6;   // number unit of point in circle\nconst maxRadius = 60;\n\n//const steps = 8;\nconst steps = 7;\nconst height = 140;\n//const height = 90;\n\nconst offset = -10;\n\nconst cubeSize = 3;\n\n\nconst createHSVCubes = () => {\n  const ret = []\n  for (let i = 0; i <= steps; i++) {\n    const value = i / steps * 100.0;\n    for (let j = 0; j <= i; j++) {\n    // for cylider formation\n    //for (let j = 0; j <= steps; j++) {\n      const saturation = j / steps * 100.0;\n      const numCubes = Math.max(j * n, 1);\n      //const numCubes = Math.max(n, 1);\n      //const numCubes = 15\n      for (let k = 0; k < numCubes; k++) {\n        const degree = 360.0 / numCubes * k;\n        const color = hsv2rgb(degree, saturation, value);\n        //const pos = getCubePosition(degree, saturation, value);\n        const [x, y, z] = getCubePosition(degree, saturation, value);\n        const cube = createCubeMesh(cubeSize, color, x, y, z);\n        ret.push(cube);\n      }\n    }\n  }\n  return ret;\n};\n\nconst addHSVProps = (cubes) => {\n  const hsvProps = []\n  for (let i = 0; i <= steps; i++) {\n    const value = i / steps * 100.0;\n    for (let j = 0; j <= i; j++) {\n      const saturation = j / steps * 100.0;\n      const numCubes = Math.max(j * n, 1);\n      for (let k = 0; k < numCubes; k++) {\n        const degree = 360.0 / numCubes * k;\n        const color = hsv2rgb(degree, saturation, value);\n        const [x, y, z] = getCubePosition(degree, saturation, value);\n        hsvProps.push({\n          color: color,\n          position: [x, y, z],\n        });\n      }\n    }\n  }\n  hsvProps.sort(_sortByColor);\n  for (let i = 0; i < cubes.length; i++) {\n    const cube = cubes[i];\n    cube.userData.HSV = hsvProps[i];\n  }\n  return;\n};\n\nconst _sortByColor = (a, b) => {\n  if (a.color > b.color) {\n      return 1;\n  }\n  if (a.color < b.color ) {\n      return -1;\n  }\n  return 0;\n};\n\n\nconst getCubePosition = (degree, saturation, value) =>{\n  const radian = degree * Math.PI / 180.0;\n  const radius = maxRadius * saturation / 100.0;\n  return [\n    Math.cos(radian) * radius,\n    height * (value / 100.0) - offset,\n    Math.sin(radian) * radius\n  ];\n};\n\nexport {createHSVCubes, addHSVProps};\n","import React from \"react\";\n\nimport * as THREE from \"three\";\nimport OrbitControls from \"three-orbitcontrols\";\n\nimport { createRGBCubes } from '../RGBCubes';\nimport { addHSVProps } from '../HSVCubes';\nimport { OBJ_NAME} from '../CubeUtils';\n\n\nconst _getEventCoords = (e) => {\n  /*\n   * get coordinates in target element in which event occured\n   */\n  let x, y;\n  const elm = e.currentTarget;\n  if (e.targetTouches && e.targetTouches.length) {\n    x = e.targetTouches[0].pageX;\n    y = e.targetTouches[0].pageY;\n  } else if (e.changedTouches && e.changedTouches.length){\n    x = e.changedTouches[0].pageX;\n    y = e.changedTouches[0].pageY;\n  } else {\n    // mousedown, mouseup, mousemove or click\n    x = e.clientX\n    y = e.clientY\n  }\n  x -= elm.offsetParent.offsetLeft;\n  y -= elm.offsetParent.offsetTop;\n  const w = elm.offsetWidth;\n  const h = elm.offsetHeight;\n  const coords = {\n    x :  (x / w) * 2 - 1,\n    y : -(y / h) * 2 + 1,\n  };\n  return coords;\n};\n\n\n\nconst getIntersectObject = (event, scene, camera) => {\n  const raycaster = new THREE.Raycaster();\n  event.preventDefault();\n  const coords = _getEventCoords(event);\n  raycaster.setFromCamera(coords, camera);\n  const cubes = scene.children\n  const intersects = raycaster.intersectObjects(cubes);\n  if (intersects.length > 0) {\n    const mesh = intersects[0].object;\n    if (mesh.name === OBJ_NAME) {\n      return mesh;\n    }\n  }\n  return null;\n};\n\n\nclass ThreeColorSpace extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.divRef = React.createRef();\n    this.rendererRender = () => {};\n    this.selectedCube = null;\n    this.currentSpin = 0.0;\n    this.cubes = null;\n\n    this.attrs = {\n      width :  800,\n      height:  800,\n      color : 0x303030,\n\n      fov  : 60,   // field of view\n      near : 1,    // near clip\n      far  : 10000,// far clip\n\n      // for RGB\n      cameraPosition: [240, 240, 200],\n      cameraLookAt:   [0, 50, 0],\n\n      lights: {\n        ambient: [0xffffff, 1.0],  // color, strength\n        point: {\n          //config: [0xffffff, 1, 100], // color, strength, distance, decay\n          //position: [0, 100, 0],\n          castShadow: true,\n          config: [0xffffff, 1, 500], // color, strength, distance, decay\n          //position: [0, 150, 0]\n          position: [0, 300, 0]\n        },\n      },\n    };\n  }\n\n  componentDidMount() {\n    const width = this.divRef.current.parentNode.offsetWidth - 2;\n    const height = window.innerHeight;\n    const renderer = this.makeRenderer(width, height);\n    renderer.shadowMap.enabled = true;\n\n    const camera = this.makeCamera(width, height);\n    this.scene = this.makeScene();\n    const controls = this.makeOrbitControls(camera, renderer.domElement);\n\n    this.rendererRender = () => {renderer.render(this.scene, camera);};\n\n    // attach click event\n    const clickStart = this.makeEventStart();\n    const clickEnd = this.makeEventEnd(this.scene, camera);\n    renderer.domElement.addEventListener('mousedown',  clickStart);\n    renderer.domElement.addEventListener('touchstart', clickStart);\n    renderer.domElement.addEventListener('mouseup',  clickEnd);\n    renderer.domElement.addEventListener('touchend', clickEnd);\n\n    this.createCubes();\n    this.divRef.current.appendChild(renderer.domElement);\n\n    const tick = () => {\n      controls.update();\n      this.spinSelectedCube();\n      this.rendererRender();\n      requestAnimationFrame(tick);\n    };\n    tick();\n  }\n\n  spinSelectedCube () {\n    this.selectedCube.rotation.x += this.currentSpin;\n    this.selectedCube.rotation.y += this.currentSpin;\n    if (this.currentSpin > 0.1) {\n      this.currentSpin *= 0.93;\n    } else if (Math.abs(\n          this.selectedCube.rotation.y % (Math.PI / 2.0)) < 0.09) {\n      /* spinning stop */\n      this.currentSpin = 0.0;\n      this.selectedCube.rotation.set(0, 0, 0);\n      if (!this.props.previewing) {\n        this.unhighlightCubes();\n      }\n    }\n  }\n\n  makeRenderer (width, height) {\n    const renderer = new THREE.WebGLRenderer({antialias: true});\n    renderer.setSize(width, height);\n    renderer.setClearColor(this.attrs.color, 1.0);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    return renderer;\n  }\n\n  makeCamera (width, height) {\n    const aspect = width / height;\n    const camera = new THREE.PerspectiveCamera(\n        this.attrs.fov, aspect, this.attrs.near, this.far);\n    camera.position.set(...this.attrs.cameraPosition); // x, y, z\n    return camera;\n  }\n\n  makeScene () {\n    const scene = new THREE.Scene();\n\n    /* light settings */\n    if (this.attrs.lights.ambient) {\n      const ambient = new THREE.AmbientLight(...this.attrs.lights.ambient);\n      scene.add(ambient);\n    }\n    if (this.attrs.lights.point) {\n      const light = new THREE.PointLight(...this.attrs.lights.point.config);\n      light.position.set(...this.attrs.lights.point.position);\n      light.castShadow = this.attrs.lights.point.castShadow;\n      scene.add(light);\n    }\n\n    /* scene settings */\n    //scene.add(new THREE.AxesHelper(1000));\n    if (false) {\n      scene.add(new THREE.GridHelper(1200, 60, 0x888888));\n    } else {\n\n      const plane = new THREE.Mesh(\n        new THREE.PlaneGeometry(1200,1200,2),\n\n        new THREE.MeshStandardMaterial({\n          //color: 0x888888,\n          color : 0x404040,\n          //color : 0x303030,\n          side: THREE.DoubleSide,\n          transparent: true,\n          opacity: 0.85,\n        })\n      );\n      plane.position.set(0, -1, 0);\n      plane.rotation.set(Math.PI / 2.0, 0, 0);\n      plane.castShadow = false;\n      plane.receiveShadow = true;\n\n      scene.add(plane);\n\n      const gridLineColor = 0x606060;\n      scene.add(new THREE.GridHelper(1200, 60, gridLineColor, gridLineColor));\n    }\n\n    return scene;\n  }\n\n  createCubes () {\n    this.cubes = createRGBCubes();\n    addHSVProps(this.cubes);\n    for (let cube of this.cubes) {\n      this.scene.add(cube);\n    }\n    this.selectedCube = this.cubes.slice(-1)[0];\n  };\n\n  highlightCubes () {\n    for (let cube of this.cubes) {\n      cube.material.opacity = 0.2;\n    }\n    this.selectedCube.material.opacity = 1.0;\n  }\n\n  unhighlightCubes () {\n    for (let cube of this.cubes) {\n      cube.material.opacity = 1.0;\n    }\n  }\n\n  makeOrbitControls (camera, elm) {\n    const controls = new OrbitControls(camera, elm)\n    controls.target = new THREE.Vector3(...this.attrs.cameraLookAt);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.1;\n    return controls\n  }\n\n  makeEventStart () {\n    const onStart = (e) => {\n      this.evtCoords = _getEventCoords(e);\n    };\n    return onStart;\n  }\n\n  makeEventEnd (scene, camera) {\n    const onClicked = (e) => {\n      const coords = _getEventCoords(e);\n      if (coords.x !== this.evtCoords.x || coords.y !== this.evtCoords.y) {\n        return;\n      }\n      const selected = getIntersectObject(e, scene, camera);\n      if (selected) {\n        /* reset rotation of previously selected */\n        this.selectedCube.rotation.set(0, 0, 0);\n        this.selectedCube = selected;\n        this.currentSpin = 1.0;\n        const color = this.selectedCube.material.color;\n        const rgb = color.getHexString();\n        //const hsl = color.getHSL();\n        this.highlightCubes();\n        this.props.onSelectColor(`#${rgb}`);\n      }\n    };\n    return onClicked;\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.model !== nextProps.model) {\n      this.updateCubes(nextProps.model);\n    }\n    if (this.props.previewing !== nextProps.previewing) {\n      if (nextProps.previewing) {\n        this.highlightCubes();\n      } else {\n        this.unhighlightCubes();\n      }\n    }\n    return false;\n  }\n\n  updateCubes(model) {\n    for (let cube of this.cubes) {\n      const prop = cube.userData[model];\n      cube.position.set(...prop.position);\n      cube.material.color.setHex(prop.color);\n    }\n  }\n\n  render() {\n    return (\n      <div ref={this.divRef}/>\n    )\n  }\n}\n\nexport default ThreeColorSpace;\n","import React, { useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\n\nimport useStyles from './style.js';\nimport ThreeColorSpace from './components/ThreeColorSpace';\nimport {selectTextColor} from './ColorUtils';\n\n\nconst App = (props) => {\n  const classes = useStyles();\n  const [model, setModel] = useState('RGB');\n  const [selecedColor, setColor] = useState('#ffffff');\n  const [previewing, setPreviewing] = useState(false);\n\n  const getVariant = (modelName) => {\n    return model === modelName ? \"contained\" : \"outlined\";\n  }\n  const togglePreview = () => {\n    setPreviewing(!previewing);\n  };\n\n  return (\n    <div className={classes.wrapper}>\n      <Container maxWidth=\"md\" className={classes.container}>\n        <div className={classes.header}>\n          <img  className={classes.logo} src={'logo_20_02.png'} alt={'logo'} />\n        </div>\n        <ThreeColorSpace\n          model={model}\n          previewing={previewing}\n          onSelectColor={rgb => {setColor(rgb)}}\n        />\n\n        <div className={classes.controlButtons}>\n          {/*\n          {\n            previewing ? (\n              <Typography>\n                {selecedColor}\n              </Typography>\n            ) : null\n          }\n          */}\n          <Button\n            className={classes.colorPreview}\n            style={{\n              backgroundColor: selecedColor,\n              color: selectTextColor(selecedColor),\n            }}\n            onClick={togglePreview}\n            aria-label=\"color preview\"\n          >\n            {selecedColor}\n          </Button>\n\n          <ButtonGroup\n            className={classes.buttons}\n            orientation=\"vertical\"\n            color=\"secondary\"\n            aria-label=\"vertical outlined primary button group\"\n          >\n            <Button\n              variant={getVariant('RGB')}\n              onClick={e => {setModel('RGB')}}\n            >\n              RGB\n            </Button>\n            <Button\n              variant={getVariant('HSV')}\n              onClick={e => {setModel('HSV')}}\n            >\n              HSV\n            </Button>\n          </ButtonGroup>\n        </div>\n      </Container>\n    </div>\n  );\n};\n\n\nexport default App;\n","import { indigo, pink }   from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n/* A custom theme for this app */\n/* as to color variation, see https://material-ui.com/customization/color/ */\nconst theme = createMuiTheme({\n  palette: {\n    // primary: {\n    //   main: '#80D8FF',\n    // },\n    // secondary: {\n    //   main: '#80CBC4',\n    // },\n    // error: {\n    //   main: red.A400,\n    // },\n    primary: indigo,\n    secondary: pink,\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\nimport App from './App';\nimport theme from './theme';\n\nReactDOM.render(\n  <MuiThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </MuiThemeProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}