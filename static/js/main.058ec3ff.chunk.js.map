{"version":3,"sources":["ColorUtils.js","CubeUtils.js","RGBCubes.js","HSVCubes.js","components/ThreeColorSpace.js","App.js","theme.js","index.js"],"names":["rgb2str","r","g","b","_toHexStr","hsv2rgb","h","s","v","min","_to8bitsInteger","n","toString","val","Math","floor","createCubeMesh","size","color","x","y","z","geometry","THREE","material","mesh","castShadow","receiveShadow","position","set","name","offset","getCubeColor","i","j","k","getCubePosition","totalSize","degree","saturation","value","radian","PI","radius","cos","sin","ThreeColorSpace","props","divRef","React","createRef","rendererRender","selectedCube","currentSpin","attrs","width","height","fov","near","far","cameraPosition","cameraLookAt","lights","ambient","point","config","window","innerWidth","innerHeight","renderer","this","makeRenderer","shadowMap","enabled","camera","makeCamera","scene","makeScene","controls","makeOrbitControls","domElement","render","clicked","makeCallbackFunc","addEventListener","current","appendChild","updateCubes","model","tick","update","rotation","abs","requestAnimationFrame","antialias","setSize","setClearColor","setPixelRatio","devicePixelRatio","aspect","add","light","plane","side","transparent","opacity","meshes","elm","OrbitControls","target","enableDamping","dampingFactor","e","event","raycaster","preventDefault","currentTarget","type","startsWith","targetTouches","pageX","offsetLeft","pageY","offsetTop","clientX","clientY","_getPosition","coords","offsetWidth","offsetHeight","setFromCamera","cubes","children","intersects","intersectObjects","length","object","getIntersectObject","rgb","getHexString","onSelectColor","nextProps","nextState","obj","remove","addMeshes","ret","cube","push","createRGBCubes","numCubes","max","createHSVCubes","ref","Component","SPACING","logoSize","makeHeaderStyle","theme","space","top","spacing","left","makeLogoStyle","makeButtonsStyle","bottom","useStyles","makeStyles","header","flexGrow","display","breakpoints","down","up","logo","buttons","colorPreview","right","App","classes","useState","setModel","selecedColor","setColor","getVariant","modelName","className","src","alt","ButtonGroup","orientation","aria-label","Button","variant","onClick","Box","style","backgroundColor","createMuiTheme","palette","primary","indigo","secondary","pink","background","default","ReactDOM","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.058ec3ff.chunk.js","sourcesContent":["/**\n * @desc\n * ColorUtils module\n * @module ColorUtils\n */\n\n\nconst rgb2str = (r, g, b) => {\n  return \"#\" + \n      _toHexStr(r) + \n      _toHexStr(g) + \n      _toHexStr(b);\n};\n\nconst hsl2str = (h, s, l) => {\n  return \"hsl(\" + \n      Math.round(360.0 * h) + \", \" + \n      Math.round(100.0 * s) + \"%, \" + \n      Math.round(100.0 * l) + \"%)\";\n};\n\n/**\n * @param {Number} h degree of Hue in HSV color model (0 - 359)\n * @param {Number} s percentage of Saturation in HSV color model (0 - 100)\n * @param {Number} v percentage of Value in HSV color model (0 - 100)\n * @return {String} RGB HEX Value\n */\nconst hsv2rgb = (h, s, v) => {\n  let r, g, b;\n  const max = v;\n  const min = v - s;\n  if (h < 0 || h >= 360) {\n    r = 0;\n    g = 0;\n    b = 0;\n  } else if (h < 60) {\n    r = max;\n    g = min + (max - min) * h / 60;\n    b = min;\n  } else if (h < 120) {\n    r = min + (max - min) * (120 - h) / 60;\n    g = max;\n    b = min;\n  } else if (h < 180) {\n    r = min;\n    g = max;\n    b = min + (max - min) * (h - 120) / 60;\n  } else if (h < 240) {\n    r = min;\n    g = min + (max - min) * (240 - h) / 60;\n    b = max;\n  } else if (h < 300) {\n    r = min + (max - min) * (h - 240) / 60;\n    g = min;\n    b = max;\n  } else if (h < 360) {\n    r = max;\n    g = min;\n    b = min + (max - min) * (360 - h) / 60;\n  }\n  r = _to8bitsInteger(r);\n  g = _to8bitsInteger(g);\n  b = _to8bitsInteger(b);\n  return rgb2str(r, g, b);\n}\n\n\n/******************************************\n * private functions\n ******************************************/\nconst _toHexStr = n => {\n  if (n < 16) {\n    return \"0\" + n.toString(16);\n  }\n  return n.toString(16);\n};\n\n/**\n * convert percentage value to 8bit digit (0-1.0 -> 0-255) \n * @param {Number} val\n * @param {Number} n \n * @return rounded value\n */\nconst _to8bitsInteger = val => {\n  return Math.floor(255 * val / 100.0);\n};\n\n\nexport { rgb2str, hsl2str, hsv2rgb };\n","import * as THREE from \"three\";\n\nexport const OBJ_NAME = 'CUBES';\n\nexport const createCubeMesh = (size, color, x, y, z) => {\n  const geometry = new THREE.CubeGeometry(size, size, size);\n  const material = new THREE.MeshPhongMaterial({color: color});\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = true;\n  mesh.receiveShadow = true;\n  mesh.position.set(x, y, z);\n  mesh.name = OBJ_NAME;\n  return mesh;\n};\n","import {rgb2str} from './ColorUtils'\nimport {createCubeMesh} from './CubeUtils'\n\nconst n = 8;\nconst cubeSize = 3;\n\n//const spacing = 6;\nconst spacing = 8;\nconst offset = [0, 80, 0];\n\nconst totalSize = cubeSize * n + spacing * (n - 1);\nconst colorSpacing = 256 / n;\n\n\nconst createRGBCubes = () => {\n  const ret = []\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      for (let k = 0; k < n; k++) {\n        const color = getCubeColor(i, j, k);\n        const [x, y, z] = getCubePosition(i, j, k);\n        const cube = createCubeMesh(cubeSize, color, x, y, z);\n        ret.push(cube);\n      }\n    }\n  }\n  return ret;\n};\n\n\nconst getCubeColor = (i, j, k) => {\n  return rgb2str(\n    i * colorSpacing,\n    j * colorSpacing,\n    k * colorSpacing\n  );\n};\n\nconst getCubePosition = (i, j, k) => {\n  return [\n    cubeSize * (i + 1) + spacing * i - (totalSize / 2) + offset[0],\n    cubeSize * (j + 1) + spacing * j - (totalSize / 2) + offset[1],\n    cubeSize * (k + 1) + spacing * k - (totalSize / 2) + offset[2]\n  ];\n};\n\nexport {createRGBCubes};\n","import {hsv2rgb} from './ColorUtils'\nimport {createCubeMesh} from './CubeUtils'\n\nconst n = 6;   // number unit of point in circle\nconst maxRadius = 60;\n\n//const steps = 8;\nconst steps = 7;\nconst height = 140;\n//const height = 90;\n\nconst offset = -10;\n\nconst cubeSize = 3;\n\n\nconst createHSVCubes = () => {\n  const ret = []\n  for (let i = 0; i <= steps; i++) {\n    const value = i / steps * 100.0;\n    for (let j = 0; j <= i; j++) {\n    // for cylider formation\n    //for (let j = 0; j <= steps; j++) {\n      const saturation = j / steps * 100.0;\n      const numCubes = Math.max(j * n, 1);\n      //const numCubes = Math.max(n, 1);\n      //const numCubes = 15\n      for (let k = 0; k < numCubes; k++) {\n        const degree = 360.0 / numCubes * k;\n        const color = hsv2rgb(degree, saturation, value);\n        //const pos = getCubePosition(degree, saturation, value);\n        const [x, y, z] = getCubePosition(degree, saturation, value);\n        const cube = createCubeMesh(cubeSize, color, x, y, z);\n        ret.push(cube);\n      }\n    }\n  }\n  return ret;\n};\n\n\nconst getCubePosition = (degree, saturation, value) =>{\n  const radian = degree * Math.PI / 180.0;\n  const radius = maxRadius * saturation / 100.0;\n  return [\n    Math.cos(radian) * radius,\n    height * (value / 100.0) - offset,\n    Math.sin(radian) * radius\n  ];\n};\n\nexport {createHSVCubes};\n","import React from \"react\";\n\nimport * as THREE from \"three\";\nimport OrbitControls from \"three-orbitcontrols\";\n\nimport { createRGBCubes } from '../RGBCubes';\nimport { createHSVCubes } from '../HSVCubes';\nimport { OBJ_NAME} from '../CubeUtils'\n\n\nconst _getPosition = (e, elm) => {\n  /*\n    \"touchstart\": \"mousedown\"\n    \"touchmove\" : \"mousemove\"\n    \"touchend\"  : \"mouseup\"\n    \"click\" -> PC only\n  */\n  if (e.type.startsWith('touch')) {\n    const x = e.targetTouches[0].pageX - elm.offsetLeft;\n    const y = e.targetTouches[0].pageY - elm.offsetTop;\n    return [x, y];\n  }\n  const x = e.clientX - elm.offsetLeft;\n  const y = e.clientY - elm.offsetTop;\n  return [x, y];\n};\n\n\n\nconst getIntersectObject = (event, scene, camera) => {\n  const raycaster = new THREE.Raycaster();\n  event.preventDefault();\n  const elm = event.currentTarget;\n  const [x, y] = _getPosition(event, elm);\n  const w = elm.offsetWidth;\n  const h = elm.offsetHeight;\n  const coords = {\n    x :  (x / w) * 2 - 1,\n    y : -(y / h) * 2 + 1,\n  };\n  raycaster.setFromCamera(coords, camera);\n  const cubes = scene.children\n  const intersects = raycaster.intersectObjects(cubes); \n  if (intersects.length > 0) {\n    const mesh = intersects[0].object;\n    if (mesh.name === OBJ_NAME) {\n      return mesh;\n    }\n  }\n  return null;\n};\n\n\nclass ThreeColorSpace extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.divRef = React.createRef();\n    this.rendererRender = () => {};\n    this.selectedCube = null;\n    this.currentSpin = 0.0;\n\n    this.attrs = {\n      width :  800,\n      height:  800,\n      color : 0x303030,\n\n      fov  : 60,   // field of view\n      near : 1,    // near clip\n      far  : 10000,// far clip\n\n      // for RGB\n      cameraPosition: [240, 240, 200],\n      cameraLookAt:   [0, 50, 0],\n\n      lights: {\n        ambient: [0xffffff, 1.0],  // color, strength\n        point: {\n          //config: [0xffffff, 1, 100], // color, strength, distance, decay\n          //position: [0, 100, 0],\n          castShadow: true,\n          config: [0xffffff, 1, 500], // color, strength, distance, decay\n          //position: [0, 150, 0]\n          position: [0, 300, 0]\n        },\n      },\n    };\n  }\n\n  componentDidMount() {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    const renderer = this.makeRenderer(width, height);\n    renderer.shadowMap.enabled = true;\n\n    const camera = this.makeCamera(width, height);\n    this.scene = this.makeScene();\n    const controls = this.makeOrbitControls(camera, renderer.domElement);\n\n    this.rendererRender = () => {renderer.render(this.scene, camera);};\n\n    // attach click event\n    const clicked = this.makeCallbackFunc(this.scene, camera);\n    renderer.domElement.addEventListener('click', clicked);\n    renderer.domElement.addEventListener('touchstart', clicked);\n    //renderer.domElement.addEventListener('mousedown', clicked);\n\n    this.divRef.current.appendChild(renderer.domElement);\n\n    this.updateCubes(this.props.model);\n\n    const tick = () => {\n      controls.update();\n      if (this.selectedCube) {\n        this.selectedCube.rotation.x += this.currentSpin;\n        this.selectedCube.rotation.y += this.currentSpin;\n        if (this.currentSpin > 0.1) {\n          this.currentSpin *= 0.9;\n        } else if (Math.abs(\n              this.selectedCube.rotation.y % (Math.PI / 2.0)) < 0.09) {\n          this.currentSpin = 0.0;\n          this.selectedCube.rotation.set(0, 0, 0);\n        }\n      }\n      this.rendererRender();\n      requestAnimationFrame(tick);\n    };\n    tick();\n  }\n\n  makeRenderer (width, height) {\n    const renderer = new THREE.WebGLRenderer({antialias: true});\n    renderer.setSize(width, height);\n    renderer.setClearColor(this.attrs.color, 1.0);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    return renderer;\n  }\n\n  makeCamera (width, height) {\n    const aspect = width / height;\n    const camera = new THREE.PerspectiveCamera(\n        this.attrs.fov, aspect, this.attrs.near, this.far);\n    camera.position.set(...this.attrs.cameraPosition); // x, y, z\n    return camera;\n  }\n\n  makeScene () {\n    const scene = new THREE.Scene();\n\n    /* light settings */\n    if (this.attrs.lights.ambient) {\n      const ambient = new THREE.AmbientLight(...this.attrs.lights.ambient);\n      scene.add(ambient);\n    }\n    if (this.attrs.lights.point) {\n      const light = new THREE.PointLight(...this.attrs.lights.point.config);\n      light.position.set(...this.attrs.lights.point.position);\n      light.castShadow = this.attrs.lights.point.castShadow;\n      scene.add(light);\n    }\n\n    /* scene settings */\n    //scene.add(new THREE.AxesHelper(1000));\n    if (false) {\n      scene.add(new THREE.GridHelper(1200, 60, 0x888888));\n    } else {\n\n      const plane = new THREE.Mesh(\n        new THREE.PlaneGeometry(1200,1200,2),\n\n        new THREE.MeshStandardMaterial({\n          //color: 0x888888,\n          color : 0x404040,\n          //color : 0x303030,\n          side: THREE.DoubleSide,\n          transparent: true,\n          opacity: 0.85,\n        })\n      );\n      plane.position.set(0, -1, 0);\n      plane.rotation.set(Math.PI / 2.0, 0, 0);\n      plane.castShadow = false;\n      plane.receiveShadow = true;\n\n      scene.add(plane);\n\n      const gridLineColor = 0x606060;\n      scene.add(new THREE.GridHelper(1200, 60, gridLineColor, gridLineColor));\n    }\n\n    return scene;\n  }\n\n  addMeshes (meshes) {\n    for (let mesh of meshes) {\n      this.scene.add(mesh);\n    }\n  }\n\n  makeOrbitControls (camera, elm) {\n    const controls = new OrbitControls(camera, elm)\n    controls.target = new THREE.Vector3(...this.attrs.cameraLookAt);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.1;\n    return controls\n  }\n\n  makeCallbackFunc (scene, camera) {\n    const onClicked = (e) => {\n      const mesh = getIntersectObject(e, scene, camera);\n      if (mesh) {\n        this.selectedCube = mesh;\n        this.currentSpin = 1.0;\n        const color = mesh.material.color;\n        const rgb = color.getHexString();\n        //mesh.material.color.setHex(0xff0000);\n        //const hsl = color.getHSL();\n        this.props.onSelectColor(`#${rgb}`);\n      }\n    };\n    return onClicked;\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.model !== nextProps.model) {\n      this.updateCubes(nextProps.model);\n    }\n    return false;\n  }\n\n  updateCubes(model) {\n    for (let obj of this.scene.children) {\n      if (obj.name === OBJ_NAME) {\n        this.scene.remove(obj);\n      }\n    }\n    if (model === 'RGB') {\n      this.addMeshes(createRGBCubes());\n    } else {\n      this.addMeshes(createHSVCubes());\n    }\n    this.rendererRender();\n  }\n\n  render() {\n    return (\n      <div ref={this.divRef}/>\n    )\n  }\n}\n\nexport default ThreeColorSpace;\n","import React, { useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport ThreeColorSpace from './components/ThreeColorSpace';\n\nconst SPACING = {\n  'sm': 1,\n  'md': 2,\n  'lg': 2,\n};\nconst logoSize = {\n  'sm': 48,\n  'md': 56,\n  'lg': 64,\n};\n\nconst makeHeaderStyle = (theme, space) => {\n  return {\n    top: theme.spacing(space),\n    left: theme.spacing(space),\n    //right: theme.spacing(space),\n  };\n};\nconst makeLogoStyle = (height) => {\n  return {\n    height: height,\n  };\n};\nconst makeButtonsStyle = (theme, space) => {\n  return {\n    bottom: theme.spacing(space),\n    left: theme.spacing(space),\n  };\n};\n\nconst useStyles = makeStyles(theme => ({\n  header: {\n    position: 'absolute',\n    flexGrow: 1,\n    display: 'flex',\n    [theme.breakpoints.down('sm')]: makeHeaderStyle(theme, SPACING.sm),\n    [theme.breakpoints.up('sm')]  : makeHeaderStyle(theme, SPACING.md),\n    [theme.breakpoints.up('lg')]  : makeHeaderStyle(theme, SPACING.lg),\n  },\n  logo: {\n    [theme.breakpoints.down('sm')]: makeLogoStyle(logoSize.sm),\n    [theme.breakpoints.up('sm')]  : makeLogoStyle(logoSize.md),\n    [theme.breakpoints.up('lg')]  : makeLogoStyle(logoSize.lg),\n  },\n  buttons: {\n    position: 'absolute',\n    [theme.breakpoints.down('sm')]: makeButtonsStyle(theme, SPACING.sm),\n    [theme.breakpoints.up('sm')]  : makeButtonsStyle(theme, SPACING.md),\n    [theme.breakpoints.up('lg')]  : makeButtonsStyle(theme, SPACING.lg),\n  },\n  colorPreview: {\n    position: 'absolute',\n    width: '100px',\n    height: '100px',\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n  },\n}));\n\n\nconst App = (props) => {\n  const classes = useStyles();\n  const [model, setModel] = useState('RGB');\n  const [selecedColor, setColor] = useState('#fff');\n  const getVariant = (modelName) => {\n    return model === modelName ? \"contained\" : \"outlined\";\n  }\n  return (\n    <>\n      <div className={classes.header}>\n        <img  className={classes.logo} src={'logo_20_02.png'} alt={'logo'} />\n      </div>\n      <ThreeColorSpace\n        model={model}\n        onSelectColor={rgb => {setColor(rgb)}}\n      />\n      <ButtonGroup\n        className={classes.buttons}\n        orientation=\"vertical\"\n        color=\"secondary\"\n        aria-label=\"vertical outlined primary button group\"\n      >\n        <Button\n          variant={getVariant('RGB')}\n          onClick={e => {setModel('RGB')}}\n        >\n          RGB\n        </Button>\n        <Button\n          variant={getVariant('HSV')}\n          onClick={e => {setModel('HSV')}}\n        >\n          HSV\n        </Button>\n      </ButtonGroup>\n\n      <Box\n        className={classes.colorPreview}\n        style={{backgroundColor: selecedColor}}\n        aria-label=\"selected color\"\n      />\n    </>\n  );\n};\n\n\nexport default App;\n","import { indigo, pink }   from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n/* A custom theme for this app */\n/* as to color variation, see https://material-ui.com/customization/color/ */\nconst theme = createMuiTheme({\n  palette: {\n    // primary: {\n    //   main: '#80D8FF',\n    // },\n    // secondary: {\n    //   main: '#80CBC4',\n    // },\n    // error: {\n    //   main: red.A400,\n    // },\n    primary: indigo,\n    secondary: pink,\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\nimport App from './App';\nimport theme from './theme';\n\nReactDOM.render(\n  <MuiThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </MuiThemeProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}